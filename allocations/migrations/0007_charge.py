# Generated by Django 3.2 on 2021-11-10 01:54

from allocations.models import Charge
from django.contrib.auth import get_user_model
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone

import datetime
import json
import logging
import MySQLdb
import pytz

from .. import utils


def _get_charges(db):
    result = []
    result.extend(utils.get_computehost_charges_by_ids(db))
    result.extend(utils.get_network_charges_by_ids(db))
    result.extend(utils.get_floatingip_charges_by_ids(db))

    return result


def _get_charge_allocation(charge, db):
    cursor = db.cursor(MySQLdb.cursors.DictCursor)
    sql = '''
        SELECT a.id, a.start_date
        FROM allocations_allocation AS a
        JOIN projects_project AS p ON p.id = a.project_id
        WHERE start_date < %(reservation_end)s
        AND expiration_date >= %(reservation_end)s
        AND p.charge_code = %(charge_code)s
        AND status in ('active', 'inactive')
    '''
    cursor.execute(sql,
                   {"reservation_end": charge["end_time"],
                    "charge_code": charge["charge_code"],
                    })
    allocations = cursor.fetchall()
    if len(allocations) == 0:
        logging.warn(f'allocation not found for charge {charge}!')
        allocation = None
    elif len(allocations) == 1:
        allocation = allocations[0]["id"]
    else:
        allocation = max(allocations, key=lambda x: x['start_date']).get("id")
    return allocation


def _get_charge_user(charge):
    user_model = get_user_model()
    try:
        user = user_model.objects.get(username=charge["username"])
        return user.id
    except user_model.DoesNotExist:
        logging.warning(f'user {charge["username"]} not found!')
        return None


def _str_to_localtime(utctimestr):
    utc = datetime.datetime.strptime(
        utctimestr, utils.DATETIME_FORMAT
    ).replace(tzinfo=pytz.UTC)
    localtz = utc.astimezone(timezone.get_current_timezone())
    return localtz


def init_charge_from_openstack_db(apps, schema_editor):
    # No initial charges in test DB
    if settings.TESTING:
        return

    portal_db = utils.connect_to_portal_db()
    inserts = []
    for region in settings.REGION_OPENSTACK_DB_CONNECT.keys():
        db = utils.connect_to_region_db(region)
        for charge in _get_charges(db):
            charge["allocation_id"] = _get_charge_allocation(charge, portal_db)
            charge["user_id"] = _get_charge_user(charge)
            charge.pop("username")
            charge.pop("charge_code")
            charge["region_name"] = region
            if (all(charge.values()) and
                    charge["start_time"] < charge["end_time"]):
                charge["start_time"] = _str_to_localtime(charge["start_time"])
                charge["end_time"] = _str_to_localtime(charge["end_time"])
                inserts.append(Charge(**charge))

    Charge.objects.bulk_create(inserts, batch_size=1000)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('allocations', '0006_allocation_expiration_warning_issued'),
    ]

    operations = [
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.TextField()),
                ('resource_id', models.TextField()),
                ('resource_type', models.TextField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(null=True)),
                ('hourly_cost', models.FloatField()),
                ('allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charges', to='allocations.allocation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charges', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(init_charge_from_openstack_db),
    ]
